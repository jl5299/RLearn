spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(parse_number(class))
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
print
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
print
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
print
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
print
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
submit()
students4
# Complete the chained command below so that we are
# selecting the id, name, and sex column from students4
# and storing the result in student_info.
#
student_info <- students4 %>%
select( id, name, sex) %>%
print
submit()
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
# select() the id, class, midterm, and final columns
# (in that order) and store the result in gradebook.
#
gradebook <- students4 %>%
select(id,class,midterm,final) %>%
print
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed,failed)
sat
submit()
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()>
separate(part_sex, part, sex)%>%
print
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()>
separate(part_sex, part, sex)%>%
print
submit()
?separate
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()>
separate(part_sex, "part" "sex")%>%
print
submit()
submit()
swirl()
swirl()
install_course("Regression_Models")
swirl()
source('~/Work/RLearn/mainRun.R')
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "505b574a0e5317bc1934",
secret = "f9684ba190380c2c1aff0a933a4e2a76effa6dba"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
the page
thepage
thepage = readLines('http://biostat.jhsph.edu/~jleek/contact.html')
thepage
nchar(thepage[10])
nchar(thepage[20])
nchar(thepage[30])
nchar(thepage[100])
library(readr)
getdata_wksst8110 <- read_csv("C:/Users/Justin Law/Downloads/getdata_wksst8110.for")
View(getdata_wksst8110)
library(readr)
getdata_wksst8110 <- read_table2("C:/Users/Justin Law/Downloads/getdata_wksst8110.for")
View(getdata_wksst8110)
sum(getdata_wksst8110, data)
View(getdata_wksst8110)
sum(getdata_wksst8110, na.rm = TRUE, data)
sum(getdata_wksst8110[,4], na.rm = TRUE, data)
sum(getdata_wksst8110[,4], na.rm = TRUE, data)
sum(getdata_wksst8110[4,], na.rm = TRUE, data)
library(dplyr)
currfolder <- "./data"
dir.create("./data")
setwd(currfolder)
#import from online
dataOnline <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zippedData <- "UCI HAR Dataset.zip"
download.file(dataOnline, zippedData)
unzip(zippedData)
#take out files
features <- paste("UCI HAR Dataset", "features.txt", sep="/")
activity <- paste("UCI HAR Dataset", "activity_labels.txt", sep="/")
xtest <- paste("UCI HAR Dataset", "test/X_test.txt", sep="/")
ytest <- paste("UCI HAR Dataset", "test/y_test.txt", sep="/")
subjecttest <- paste("UCI HAR Dataset", "test/subject_test.txt", sep="/")
xtrain <- paste("UCI HAR Dataset", "train/X_train.txt", sep="/")
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
subjecttrain <- paste("UCI HAR Dataset", "train/subject_train.txt", sep="/")
featuresData <- read.table(features)
View(galton)
View(featuresData)
featuresData <- read.table(features, col.names=c("rownumber","Variablename"))
featuresData
uniquefeatures <- unique(featuresData)
featuresData
View(featuresData)
uniquefeatures <- mutate(features, Variable = gsub("BodyBody","Body", variable))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", variable))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
featuresData <- read.table(features, col.names=c("Row","Variable"))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- unique(featuresData)
View(uniquefeatures)
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- unique(featuresData)
View(uniquefeatures)
View(uniquefeatures)
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- unique(uniquefeatures)
View(uniquefeatures)
usedfeatures <- filter(uniquefeatures, grep1("mean\\(\\)|std\\(\\)", uniquefeatures))
usedfeatures <- filter(uniquefeatures, grep1("mean\\(\\)|std\\(\\)", Variable))
uniquefeatures
head(uniquefeatures)
usedfeatures <- filter(uniquefeatures, grep1("mean\\(\\)|std\\(\\)", Variable))
usedfeatures <- filter(uniquefeatures, grepl("mean\\(\\)|std\\(\\)", Variable))
activity <- paste("UCI HAR Dataset", "activity_labels.txt", sep="/")
labels <- read.table(activity, col.names=c("activity", "description"))
testvals <- read.table(xtest, col.names = uniquefeatures$Variable)
usedtestvals <- testvals [, usedfeatures$Variable]
usedtestvals <- testvals [ , usedfeatures$Variable]
usedtestvals <- testvals[ , usedfeatures$Variable]
head(testvals)
View(testvals)
head(testvals)
usedtestvals <- testvals[ , usedfeatures$Variable]
usedfeatures <- filter(uniquefeatures, grepl("mean\\(\\)|std\\(\\)", Variable))
View(usedfeatures)
View(usedfeatures)
testvals <- read.table(xtest, col.names = usedfeatures$Variable)
usedtestvals <- filter(testvals, usedfeatures$Variable)
usedtestvals <- testvals[ , usedfeatures$Variable]
testactivities <- read.table(ytest, col.names = c("activity"))
testneededvalues <- testvals[ , usedfeatures$Varaible]
subjecttesttable <- read.table(subjecttest, col.names=c("subject"))
subjecttest <- paste("UCI HAR Dataset", "test/subject_test.txt", sep="/")
subjecttesttable <- read.table(subjecttest, col.names=c("subject"))
testactivitiesdesc <- merge(testactivities, labels)
testdata <- cbind(testactivitiesdesc, subjecttesttable, usedfeatures)
testdata <- cbind(testactivitiesdesc, subjecttesttable, usedfeatures)
testdata <- merge(testactivitiesdesc, subjecttesttable, usedfeatures)
subjecttesttable
usedfeatures
testactivitiesdesc
testdata <- cbind(testactivitiesdesc, subjecttesttable, usedfeatures)
#Set up wd and load package
library(dplyr)
currfolder <- "./data"
dir.create("./data")
setwd(currfolder)
#import from online
dataOnline <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zippedData <- "UCI HAR Dataset.zip"
download.file(dataOnline, zippedData)
unzip(zippedData)
#take out files and read them into tables + fix issues
features <- paste("UCI HAR Dataset", "features.txt", sep="/")
featuresData <- read.table(features, col.names=c("Row","Variable"))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- unique(uniquefeatures)
head(uniquefeatures)
usedfeatures <- filter(uniquefeatures, grepl("mean\\(\\)|std\\(\\)", Variable))
activity <- paste("UCI HAR Dataset", "activity_labels.txt", sep="/")
labels <- read.table(activity, col.names=c("activity", "description"))
xtest <- paste("UCI HAR Dataset", "test/X_test.txt", sep="/")
testvals <- read.table(xtest, col.names = uniquefeatures$Variable)
ytest <- paste("UCI HAR Dataset", "test/y_test.txt", sep="/")
testactivities <- read.table(ytest, col.names = c("activity"))
subjecttest <- paste("UCI HAR Dataset", "test/subject_test.txt", sep="/")
subjecttesttable <- read.table(subjecttest, col.names=c("subject"))
xtrain <- paste("UCI HAR Dataset", "train/X_train.txt", sep="/")
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
xtrain <- paste("UCI HAR Dataset", "train/X_train.txt", sep="/")
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
featureTrainTable
xtrain <- paste("UCI HAR Dataset", "train/X_train.txt", sep="/")
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
xtrain
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
featureTrainTable <- read.table(xtrain, col.names=c("activity"))
featureTrainTable <- read.table(xtrain)
featureTrainTable
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
activityTrainTable <- read.table(ytrain, col.names=c("subject"))
subjecttrain <- paste("UCI HAR Dataset", "train/subject_train.txt", sep="/")
trainsubjecttable <- read.table(subjecttrain, col.names=c("subject"))
#build comprehensive data table
subjectDT <- rbind(subjecttraintable, subjecttesttable)
activityDT<- rbind(activityTrainTable, testactivities)
#build comprehensive data table
subjectDT <- rbind(subjecttraintable, subjecttesttable)
subjecttesttable
#build comprehensive data table
subjectDT <- rbind(trainsubjecttable, subjecttesttable)
activityDT<- rbind(activityTrainTable, testactivities)
activityDT<- rbind(activityTrainTable, testactivities)
testactivities <- read.table(ytest)
featureTrainTable <- read.table(xtrain)
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
activityTrainTable <- read.table(ytrain)
subjecttrain <- paste("UCI HAR Dataset", "train/subject_train.txt", sep="/")
trainsubjecttable <- read.table(subjecttrain, col.names=c("subject"))
#build comprehensive data table
subjectDT <- rbind(trainsubjecttable, subjecttesttable)
activityDT<- rbind(activityTrainTable, testactivities)
featuresDT<- rbind(featureTrainTable, testvals)
featureTrainTable <- read.table(xtrain, col.names = uniquefeatures$Variable)
featuresDT<- rbind(featureTrainTable, testvals)
names(subjectDT)<-c("subject")
names(activityDT)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path(currfolder, "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/UCI_HAR_Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/UCI HAR Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/data/UCI HAR Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/UCI HAR Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/UCI HAR Dataset/", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./data/UCI HAR Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("/UCI HAR Dataset", "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path("./UCI HAR Dataset", "features.txt"),head=FALSE)
names(featuresDT)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
compData <- cbind(subjectDT, activityDT)
finalData <- cbind(featuresDT, compData)
usedNames<-c(as.character(usedfeatures), "subject", "activity" )
usedNames<-c(as.character(usedfeatures), "subject", "activity" )
finalData<-subset(finalData,select=usedNames)
usedNames
usedNames<-c(as.character(usedfeatures), "subject", "activity" )
finalData<-subset(finalData,select=usedNames)
finalData
View(finalData)
finalData<-subset(finalData,select=usedNames)
usedNames
usedfeaturesSubset<-featuresUsed$V2[grep("mean\\(\\)|std\\(\\)", featuresUsed$V2)]
source('~/Work/RLearn/run_analysis.R')
#build comprehensive data table
subjectDT <- rbind(trainsubjecttable, subjecttesttable)
activityDT<- rbind(activityTrainTable, testactivities)
featuresDT<- rbind(featureTrainTable, testvals)
names(subjectDT)<-c("subject")
names(activityDT)<- c("activity")
featuresUsed <- read.table(file.path("./UCI HAR Dataset", "features.txt"),head=FALSE)
names(featuresDT)<- featuresUsed$V2
compData <- cbind(subjectDT, activityDT)
finalData <- cbind(featuresDT, compData)
usedfeaturesSubset<-featuresUsed$V2[grep("mean\\(\\)|std\\(\\)", featuresUsed$V2)]
usedNames<-c(as.character(usedfeaturesSubset), "subject", "activity" )
finalData<-subset(finalData,select=usedNames)
finalData
View(finalData)
str(finalData)
testactivitiesdesc
testactivitiesdesc <- merge(testactivities, labels)
#describe/label/average
names(finalData)<-gsub("^t", "time", names(finalData))
names(finalData)<-gsub("^f", "frequency", names(finalData))
names(finalData)<-gsub("Acc", "Accelerometer", names(finalData))
names(finalData)<-gsub("Gyro", "Gyroscope", names(finalData))
names(finalData)<-gsub("Mag", "Magnitude", names(finalData))
names(finalData)<-gsub("BodyBody", "Body", names(finalData))
#Set up wd and load package
library(dplyr)
currfolder <- "./data"
dir.create("./data")
setwd(currfolder)
#import from online
dataOnline <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zippedData <- "UCI HAR Dataset.zip"
download.file(dataOnline, zippedData)
unzip(zippedData)
#take out files and read them into tables + fix issues
features <- paste("UCI HAR Dataset", "features.txt", sep="/")
featuresData <- read.table(features, col.names=c("Row","Variable"))
uniquefeatures <- mutate(featuresData, Variable = gsub("BodyBody","Body", Variable))
uniquefeatures <- unique(uniquefeatures)
head(uniquefeatures)
activity <- paste("UCI HAR Dataset", "activity_labels.txt", sep="/")
labels <- read.table(activity, col.names=c("activity", "description"))
xtest <- paste("UCI HAR Dataset", "test/X_test.txt", sep="/")
testvals <- read.table(xtest, col.names = uniquefeatures$Variable)
ytest <- paste("UCI HAR Dataset", "test/y_test.txt", sep="/")
testactivities <- read.table(ytest)
subjecttest <- paste("UCI HAR Dataset", "test/subject_test.txt", sep="/")
subjecttesttable <- read.table(subjecttest, col.names=c("subject"))
testactivitiesdesc <- merge(testactivities, labels)
xtrain <- paste("UCI HAR Dataset", "train/X_train.txt", sep="/")
featureTrainTable <- read.table(xtrain, col.names = uniquefeatures$Variable)
ytrain <- paste("UCI HAR Dataset", "train/y_train.txt", sep="/")
activityTrainTable <- read.table(ytrain)
subjecttrain <- paste("UCI HAR Dataset", "train/subject_train.txt", sep="/")
trainsubjecttable <- read.table(subjecttrain, col.names=c("subject"))
#build comprehensive data table
subjectDT <- rbind(trainsubjecttable, subjecttesttable)
activityDT<- rbind(activityTrainTable, testactivities)
featuresDT<- rbind(featureTrainTable, testvals)
names(subjectDT)<-c("subject")
names(activityDT)<- c("activity")
featuresUsed <- read.table(file.path("./UCI HAR Dataset", "features.txt"),head=FALSE)
names(featuresDT)<- featuresUsed$V2
compData <- cbind(subjectDT, activityDT)
finalData <- cbind(featuresDT, compData)
usedfeaturesSubset<-featuresUsed$V2[grep("mean\\(\\)|std\\(\\)", featuresUsed$V2)]
usedNames<-c(as.character(usedfeaturesSubset), "subject", "activity" )
finalData<-subset(finalData,select=usedNames)
head(finalData)
#describe/label/average
names(finalData)<-gsub("^t", "Time", names(finalData))
names(finalData)<-gsub("Mag", "Magnitude", names(finalData))
names(finalData)<-gsub("^f", "Freq", names(finalData))
names(finalData)<-gsub("Acc", "Acceleration", names(finalData))
names(finalData)
View(finalData)
#tidy data with average
library(plyr);
#tidy data with average
library(plyr)
Data2<-aggregate(. ~subject + activity, finalData, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
Data2
View(Data2)
View(Data2)
